=== Application tuning

Some applications used by Rudder can be tuned to your needs, like the Apache web
server, or Jetty.

==== Apache web server

The Apache web server is used by Rudder as a proxy, to connect to the Jetty
application server, and to receive inventories using the WebDAV protocol.

There are tons of documentation about Apache performance tuning available on the
Internet, but the defaults should be enough for most setups.

==== Jetty

The Jetty application server is the service that runs Rudder web application and inventory
endpoint. It uses the Java runtime environment (JRE).

The default settings fit the basic recommendations for minimal Rudder hardware requirements,
but there are some configuration switches that you might need to tune to obtain better
performance with Rudder, or correct e.g. timezone issues.

To look at the available optimization knobs, please take a look at +/etc/default/rudder-jetty+
on your Rudder server.

==== CFEngine

If you are using Rudder on a highly stressed machine, which has especially slow or busy
I/O's, you might experience a sluggish CFEngine agent run everytime the machine
tries to comply with your Rules.

This is because the CFEngine agent tries to update its internal databases everytime the agent
executes a promise (the .lmdb files in the /var/rudder/cfengine-community/state directory),
which even if the database is very light, takes some time if the machine has a very high iowait.

In this case, here is a workaround you can use to restore CFEngine's full speed: you can use
a RAMdisk to store CFEngine states.

You might use this solution either temporarily, to examine a slowness problem, or permanently, to mitigate a
known I/O problem on a specific machine. We do not recommend as of now to use this on a whole IT infrastructure.

Be warned, this solution has a drawback: you should backup and restore the content of this directory
manually in case of a machine reboot because all the persistent states are stored here, so in case you are using,
for example the jobScheduler Technique, you might encounter an unwanted job execution because CFEngine will have
"forgotten" the job state.

Also, note that the mode=0700 is important as CFEngine will refuse to run correctly if the state directory is
world readable, with an error like:

----
error: UNTRUSTED: State directory /var/rudder/cfengine-community (mode 770) was not private!
----

Here is the command line to use:

[code,python]

.How to mount a RAMdisk on CFEngine state directory

----

# How to mount the RAMdisk manually, for a "one shot" test:
mount -t tmpfs -o size=128M,nr_inodes=2k,mode=0700,noexec,nosuid,noatime,nodiratime tmpfs /var/rudder/cfengine-community/state

# How to put this entry in the fstab, to make the modification permanent
echo "tmpfs /var/rudder/cfengine-community/state tmpfs defaults,size=128M,nr_inodes=2k,mode=0700,noexec,nosuid,noatime,nodiratime 0 0" >> /etc/fstab
mount /var/rudder/cfengine-community/state

----

